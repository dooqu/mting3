package cn.xylink.mting.ui.activity;import android.app.ActivityManager;import android.content.Context;import android.content.Intent;import android.graphics.drawable.AnimationDrawable;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.os.SystemClock;import android.text.TextUtils;import android.widget.ImageView;import org.greenrobot.eventbus.EventBus;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import cn.xylink.mting.MainActivity;import cn.xylink.mting.R;import cn.xylink.mting.base.BaseResponse;import cn.xylink.mting.bean.Article;import cn.xylink.mting.bean.LinkArticle;import cn.xylink.mting.bean.LinkCreateRequest;import cn.xylink.mting.bean.UserInfo;import cn.xylink.mting.contract.CheckTokenContact;import cn.xylink.mting.contract.LinkCreateContact;import cn.xylink.mting.model.CheckTokenRequest;import cn.xylink.mting.presenter.CheckTokenPresenter;import cn.xylink.mting.presenter.LinkCreatePresenter;import cn.xylink.mting.speech.data.SpeechList;import cn.xylink.mting.utils.ContentManager;import cn.xylink.mting.utils.L;import cn.xylink.mting.utils.StringUtil;public class ShareActivity extends BasePresenterActivity implements CheckTokenContact.ICheckTokenView, LinkCreateContact.IPushView {    private final static int MSG_TOKEN_ERROR = 2;    private final static int MSG_PUSH_SUCCESS = 3;    private final static int MSG_PUSH_ERROR = 4;    private Context mContext;    private CheckTokenPresenter tokenPresenter;    private String shareUrl;    private final int SHARE_TIME = 2000;    private long startTime;    private long endTime;    @BindView(R.id.iv_share_anim)    ImageView ivShareIcon;    AnimationDrawable animationDrawable;    //文章类型 1 手动添加， 2 链接添加    public int inLink = 2;    private LinkCreatePresenter linkCreatePresenter;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mContext = this;        shareCheck(getIntent());//        tokenPresenter = (CheckTokenPresenter) createPresenter(CheckTokenPresenter.class);//        tokenPresenter.attachView(this);//        CheckTokenRequest requset = new CheckTokenRequest();//        requset.doSign();//        tokenPresenter.onCheckToken(requset);        startTime = SystemClock.elapsedRealtime();    }    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        shareCheck(getIntent());    }    private Handler mHandler = new Handler(new Handler.Callback() {        @Override        public boolean handleMessage(Message m) {            switch (m.what) {                case MSG_TOKEN_ERROR:                    final int code = (int) m.obj;                    if (code != -999) {                        if (TextUtils.isEmpty(ContentManager.getInstance().getLoginToken())) {                            Intent intent = new Intent(new Intent(ShareActivity.this, LoginActivity.class));                            intent.putExtra(LoginActivity.LOGIN_ACTIVITY, "ShareActivity");                            startActivity(intent);                            finish();                        } else {                            sendMain(0);                        }                    } else {                        Intent intent = new Intent(new Intent(ShareActivity.this, LoginActivity.class));                        intent.putExtra(LoginActivity.LOGIN_ACTIVITY, "ShareActivity");                        startActivity(intent);                        finish();                    }                    break;                case MSG_PUSH_SUCCESS:                    sendMain(1);                    break;                case MSG_PUSH_ERROR:                    sendMain(0);                    break;            }            return false;        }    });    public void shareCheck(Intent intent) {        if (intent == null)            return;        Uri uri = intent.getData();        if (uri != null) {            String scheme = uri.getScheme();            String SpecificPart = uri.getSchemeSpecificPart();            shareUrl = scheme + ":" + SpecificPart;            L.v("url", shareUrl);            return;        }        String action = intent.getAction();        String type = intent.getType();        L.v("type", type);        if (Intent.ACTION_SEND.equals(action) && type != null) {            if ("text/plain".equals(type) || "text/*".equals(type)) {                String share = intent.getStringExtra(Intent.EXTRA_TEXT);                L.v("share", share);                if (TextUtils.isEmpty(share))                    return;                String htmlText = intent.getStringExtra(Intent.EXTRA_HTML_TEXT);                L.v("htmlText", htmlText);                shareUrl = StringUtil.matcherUrl(share);                L.v("shareUrl", shareUrl);            }        }    }    @Override    protected void onDestroy() {        super.onDestroy();        mHandler.removeCallbacksAndMessages(null);        if (animationDrawable != null)            animationDrawable.stop();    }    @Override    protected void preView() {        setContentView(R.layout.activity_share_main);    }    @Override    protected void initView() {        ivShareIcon.setImageResource(R.drawable.gif_share);        animationDrawable = (AnimationDrawable) ivShareIcon.getDrawable();        animationDrawable.start();    }    @Override    protected void initData() {        tokenPresenter = (CheckTokenPresenter) createPresenter(CheckTokenPresenter.class);        tokenPresenter.attachView(this);        linkCreatePresenter = (LinkCreatePresenter) createPresenter(LinkCreatePresenter.class);        linkCreatePresenter.attachView(this);        CheckTokenRequest requset = new CheckTokenRequest();        requset.doSign();        tokenPresenter.onCheckToken(requset);    }    @Override    protected void initTitleBar() {    }    @Override    public void onCheckTokenSuccess(BaseResponse<UserInfo> response) {        linkPushRequset(shareUrl);    }    //添加文章    public void linkPushRequset(String link) {        LinkCreateRequest request = new LinkCreateRequest();        request.setUrl(link);        request.setInType(inLink);        request.doSign();        linkCreatePresenter.onPush(request);    }    public void sleepMsg(int what, int code) {        endTime = SystemClock.elapsedRealtime();        Message msg = mHandler.obtainMessage();        msg.obj = code;        msg.what = what;        long takeTime = endTime - startTime;        L.v("(takeTime < SPLASH_TIME", (takeTime < SHARE_TIME));        if (takeTime < SHARE_TIME) {            takeTime = (SHARE_TIME - takeTime);            L.v("takeTime", takeTime);            mHandler.sendMessageDelayed(msg, takeTime);        } else {            mHandler.sendMessage(msg);        }    }    @Override    public void onCheckTokenError(int code, String errorMsg) {        sleepMsg(MSG_TOKEN_ERROR, -999);    }    public void sendMain(int isShareSuccess) {        Intent intent = new Intent(mContext, MainActivity.class);        intent.putExtra(MainActivity.SHARE_SUCCESS, isShareSuccess);        intent.putExtra(MainActivity.SHARE_URL, shareUrl);        startActivity(intent);        finish();    }    @Override    public void onPushSuccess(BaseResponse<LinkArticle> loginInfoBaseResponse) {        sleepMsg(MSG_PUSH_SUCCESS, 0);    }    public boolean isAppAlive() {        boolean isAppRunning = false;        ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);        if (am == null) {            return false;        }        List<ActivityManager.RunningTaskInfo> list = am.getRunningTasks(100);        for (ActivityManager.RunningTaskInfo info : list) {            if (info.topActivity.getClassName().equals(MainActivity.class.getCanonicalName()) || info.baseActivity.getClassName().equals(MainActivity.class.getCanonicalName())) {                isAppRunning = true;                break;            }        }        return isAppRunning;    }    @Override    public void onPushError(int code, String errorMsg) {        sleepMsg(MSG_PUSH_ERROR, 0);    }}